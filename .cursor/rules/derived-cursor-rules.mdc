---
description: Cursor rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT OVERVIEW

このプロジェクトは、音楽レッスンの記録と練習をサポートする総合AIアシスタントです。ユーザーはレッスン音声をアップロードすると、AI技術により文字起こし・要約・タグ付けが自動生成され、レッスン内容を効率的に管理できます。さらに、レッスン内容や個人の技術レベルに基づいた最適な練習メニューをAIが提案し、ユーザーの日々の練習をサポートします。練習に関する相談もAIに行えるなど、レッスンから日常練習までをトータルにサポートするプラットフォームです。タスク機能は削除されました。


## CODE STYLE

(No existing content. Add code style guidelines here.)


## FOLDER ORGANIZATION

### 関数フォルダ構造

```
functions/src/
  ├── index.ts                 # メインエントリーポイント
  ├── config/                  # 設定
  │   └── index.ts             # 設定
  ├── summaries/               # 要約関連機能
  │   ├── index.ts             # 要約機能のエクスポート
  │   ├── triggers.ts          # ストレージ/Firestoreトリガー
  │   ├── processor.ts         # 主要な要約処理ロジック
  │   ├── transcriber.ts       # 文字起こし機能
  │   └── generator.ts         # 要約/タグ生成機能
  ├── practice-menu/           # 練習メニュー関連機能
  │   ├── index.ts             # 練習メニュー機能のエクスポート
  │   ├── genkit.ts            # AI連携処理
  │   └── models.ts            # 練習メニューのデータモデル
  ├── tools/                   # 管理ツール
  │   └── admin-setup.ts       # 管理者設定機能
  └── common/                  # 共通ユーティリティ
      ├── storage.ts           # ストレージ操作
      ├── firestore.ts           # Firestore操作
      ├── audio.ts             # 音声ファイル操作
      ├── llm.ts               # AI/LLM共通処理
      ├── errors.ts            # エラー処理
      ├── secret.ts            # シークレット管理
      └── dify.ts              # Dify API連携機能
```

### アプリフォルダ構造

```
app/
  ├── _layout.tsx              # メインレイアウト
  ├── index.tsx                # エントリーポイント
  ├── admin.tsx                # 管理画面
  ├── admin/                   # 管理機能
  ├── settings.tsx             # 設定画面
  ├── lesson-form.tsx          # レッスン作成画面
  ├── tabs/                    # メインタブ
  │   ├── _layout.tsx          # タブレイアウト
  │   ├── index.tsx            # ホーム画面
  │   ├── lessons.tsx          # レッスン一覧
  │   ├── ai-lesson.tsx        # AIレッスン
  │   └── schedule.tsx         # スケジュール
  ├── (lesson-detail)/         # レッスン詳細
  ├── features/                # 機能モジュール
  ├── components/              # 共通コンポーネント
  │   └── deprecated/          # 廃止されたタスク関連コンポーネント
  ├── chat-room.tsx            # チャットルーム
  ├── chat-room-form.tsx       # チャットルーム作成
  ├── consult-ai.tsx           # AI相談機能
  ├── privacy-policy.tsx            # プライバシーポリシー
  ├── terms-of-service.tsx       # 利用規約
  ├── help-support.tsx         # ヘルプとサポート
  └── navigation/              # ナビゲーション
```


## TECH STACK

- **文字起こし**: OpenAI Whisper API
- **要約生成**: Dify API
- **AI対話**: Dify API
- **バックエンド**: Firebase (Functions, Firestore, Storage)
- **フロントエンド**: React Native with Expo
- **デプロイ**: Firebase Hosting, Expo EAS
- **ランタイム**: Node.js 20 (注意: Node.js 18 は 2025-04-30 に非推奨、2025-10-31 に廃止予定)
- **その他**: lodash, @react-native-async-storage/async-storage, @types/lodash


## PROJECT-SPECIFIC STANDARDS

- レッスンデータの`pieces`パラメータは必ずJSON文字列として渡す


## WORKFLOW & RELEASE RULES

- 新しいパッケージを追加したら必ず `package.json` を更新してコミットする。
- 新しいブランチを作成し、作業を行う。
- 作業が完了したらプルリクエストを作成する。
- 認証状態の永続化：Firebase認証の永続性を設定し、ログイン情報をローカルストレージに保存する。
-  Node.jsバージョンアップデートを考慮し、適切なバージョン管理を行う。
- 認証状態の永続化：Firebase認証の永続性を設定し、ログイン情報をローカルストレージに保存する。
- 使用する画面遷移メソッドは`router.navigate`を使用する。`router.replace`は使用しない。ただし、オンボーディング完了後のホーム画面遷移は`router.replace`を使用する。
- アプリ起動時、二回目以降のユーザーはログイン画面をスキップする。AsyncStorageを使用してログイン状態を保持する。(追加)
- オンボーディング画面からホーム画面への遷移は`router.navigate`を使用する。`router.replace`は使用しない。 (追加)
- オンボーディング完了後のホーム画面遷移は`router.replace('/')`を使用する。(修正)


## REFERENCE EXAMPLES

(No existing content. Add reference examples here.)


## PROJECT DOCUMENTATION & CONTEXT SYSTEM

- **プライバシーポリシー**: 2025/03/21に第一版が作成されました。  `app/privacy-policy.tsx`ファイルを参照してください。  最終更新日：第一版 [2025/03/21]
- **利用規約**: 2025/03/21に第一版が作成されました。 `app/terms-of-service.tsx`ファイルを参照してください。  最終更新日：第一版 [2025/03/21]
- **データ構造**: レッスンデータと練習メニューデータのスキーマは`project-rules.md`を参照。
- **ヘルプとサポート**: `app/help-support.tsx`ファイルを参照してください。(追加)
- **設定画面バージョン**: 0.0.1
- **設定画面開発者**: Regnition inc.


## DEBUGGING

- AsyncStorageの確認方法：アプリのログ出力、またはAsyncStorage専用のデバッグツールを使用する。
- 認証エラーのデバッグ：Firebaseコンソールで認証ログを確認する。


## FINAL DOs AND DON'Ts

- 新しいパッケージを追加したら必ず `package.json` を更新してコミットする。
- Firestoreでは、レッスンコレクションにユーザーベースのセキュリティ強制
- `pieces`パラメータは必ずJSON文字列として渡す
- API キーはSecret Managerで管理
- クライアント側での大きなファイルのアップロード時は適切な警告表示
- 管理機能へのアクセスは管理者権限を持つユーザーのみに制限
- タスク機能は削除されましたが、`app/components/deprecated`フォルダに関連ファイルは残されています。必要に応じて復元可能です。復元手順は、`app/tabs/_layout.tsx` にタスクタブを再追加、`app/_layout.tsx` にタスク関連ルーティングを復元、`app/components/deprecated` から必要なタスク関連コンポーネントを元の場所に戻す、`store/tasks.ts` を再実装、タスク関連の画面ファイルを復元です。
- 練習メニュー作成画面の注意書きは「開発中」とする。
- レッスン詳細画面、練習メニュー作成画面、タスクタブは「開発中」として表示する。
- ホーム画面のフローティングボタンの「タスク」ラベルは「練習」に変更する。
- ホーム画面の「AIおすすめの練習メニュー」セクションは「AI練習プラン」に変更する。
- ホーム画面の「AI練習プラン」セクションは「開発中」とする。
- 音声文字起こしはWhisper APIを使用し、長時間音声は10分間隔（20秒オーバーラップ）で分割
- 要約はDify APIを使用
- タグは3つの個別単語として生成（不足する場合は楽器名で補完）
- 「AI Instructions」フィールド（最大100文字）を使用してAI要約プロセスをカスタマイズ可能
- 練習メニュー生成機能はDify APIとOpenAI APIを併用して実装
- 複数のアクセスポイント（タスクタブ、レッスン詳細画面、チャット画面、ホーム画面）から練習メニュー生成機能にアクセス可能
- Dify APIの設定を適切に行うこと。設定不足の場合、AIレコメンデーションの取得に失敗します。
- 設定画面のサブスクリプション管理画面に、戻るボタンを追加する。
- 設定画面のバージョンを0.0.1にする。
- 設定画面の開発者を「Regnition inc.」に変更する。
- 設定画面の開発者情報のデザインを調整し、テキストのディセンダーが切れないようにする。
- 設定画面のサブスクリプション管理画面には、コンテンツ領域に直接戻るボタンを追加する。
- 最大音声時間: 90分
- 最大ファイルサイズ: 100MB
- 25MB以上のファイルは10分単位（20秒オーバーラップ）で分割処理
- 30MB以上のファイルアップロードはWi-Fi接続でない場合、ユーザーに警告を表示する必要があります。
- Firebase関数のリージョンはasia-northeast1にする必要があります。
- processAudioOnUpload関数の設定: メモリ4GB、タイムアウト60分、最大インスタンス数50
- generateTasksFromLessons関数の設定: メモリ4GB、タイムアウト300秒、最大インスタンス数10
- APIコールには堅牢なエラーハンドリングとロギング、失敗したAPI呼び出しには指数バックオフによる再試行メカニズムを実装する必要があります。
- プライバシーポリシーと利用規約は`app/privacy-policy.tsx`と`app/terms-of-service.tsx`に作成済みです。設定画面からアクセスできるようにルーティングを設定する必要があります。
- プライバシーポリシーと利用規約ページには、最下部にも戻るボタンを追加する。
- ヘルプとサポートページを実装する。(追加)
- 設定画面の「キャッシュ管理」機能は未実装です。
- HOME画面のピックアップタスクからタスク詳細画面への遷移パスを修正する。`/task-detail`を使用する。(追加)
- オンボーディング画面の最後のページ、「練習タスク管理」を「練習管理（開発中）」に変更する。(追加)
- 設定画面からオンボーディング画面に遷移できるようにする。(追加)
- オンボーディング画面に各タブの使い方を追加する。(追加)
- AsyncStorageはユーザーのログイン情報を保存するために使用されます。
- レッスンカードでの選択マークとゴミ箱アイコンの重なりを修正する。(追加)
- タスク生成機能は開発中であることを明記する。(追加)
- ナビゲーションバーの高さを低くする。(追加)
- オンボーディング完了後のホーム画面への遷移は、`router.replace('/')` を使用する。 (修正)
- AsyncStorageを使用してユーザーのログイン情報を保存する。
- レッスンカードの選択マークとゴミ箱アイコンの重なりを修正する。
- タスク生成機能は開発中であることを明記する。
- ナビゲーションバーの高さを低くする。
- オンボーディング画面に各タブの使い方を追加しました。(追加)
- レッスンカードを長押しした時に出るボタンの位置を調整しました。(追加)
- レッスンカードを長押しした時に出るボタンの後ろの白の背景を削除しました。(追加)
- オンボーディング画面からホーム画面への遷移は、`router.navigate`を使用する。 (追加)
- HOME画面のピックアップタスクからタスク詳細画面への遷移パスは`/task-detail`を使用する。(追加)
- 設定画面からオンボーディング画面への遷移を追加する。(追加)
- オンボーディング画面の最後のページのタイトルを「練習タスク管理」から「練習管理（開発中）」に変更する。(追加)
- レッスンカードの長押し時の選択マークとゴミ箱アイコンの重なりを修正する。(追加)
- タスク生成機能は開発中であることを明記する。(追加)