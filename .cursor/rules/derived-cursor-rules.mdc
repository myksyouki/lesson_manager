---
description: Cursor rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT OVERVIEW

このプロジェクトは、音楽レッスンの記録と練習をサポートする総合AIアシスタントです。ユーザーはレッスン音声をアップロードすると、AI技術により文字起こし・要約・タグ付けが自動生成され、レッスン内容を効率的に管理できます。さらに、レッスン内容や個人の技術レベルに基づいた最適な練習メニューをAIが提案し、ユーザーの日々の練習をサポートします。練習に関する相談もAIに行えるなど、レッスンから日常練習までをトータルにサポートするプラットフォームです。


## CODE STYLE

(No existing content. Add code style guidelines here.)


## FOLDER ORGANIZATION

### 関数フォルダ構造

```
functions/src/
  ├── index.ts                 # メインエントリーポイント
  ├── config/                  # 設定
  │   └── index.ts             # 設定
  ├── summaries/               # 要約関連機能
  │   ├── index.ts             # 要約機能のエクスポート
  │   ├── triggers.ts          # ストレージ/Firestoreトリガー
  │   ├── processor.ts         # 主要な要約処理ロジック
  │   ├── transcriber.ts       # 文字起こし機能
  │   └── generator.ts         # 要約/タグ生成機能
  ├── practice-menu/           # 練習メニュー関連機能
  │   ├── index.ts             # 練習メニュー機能のエクスポート
  │   ├── genkit.ts            # AI連携処理
  │   └── models.ts            # 練習メニューのデータモデル
  ├── tools/                   # 管理ツール
  │   └── admin-setup.ts       # 管理者設定機能
  └── common/                  # 共通ユーティリティ
      ├── storage.ts           # ストレージ操作
      ├── firestore.ts           # Firestore操作
      ├── audio.ts             # 音声ファイル操作
      ├── llm.ts             # AI/LLM共通処理
      ├── errors.ts            # エラー処理
      ├── secret.ts            # シークレット管理
      └── dify.ts             # Dify API連携処理
```

### アプリフォルダ構造

```
app/
  ├── _layout.tsx              # メインレイアウト
  ├── index.tsx                # エントリーポイント
  ├── admin.tsx                # 管理画面
  ├── admin/                   # 管理機能
  ├── settings.tsx             # 設定画面
  ├── lesson-form.tsx          # レッスン作成画面
  ├── task-form.tsx            # タスク作成画面
  ├── task-detail.tsx          # タスク詳細画面
  ├── tabs/                    # メインタブ
  │   ├── _layout.tsx          # タブレイアウト
  │   ├── index.tsx            # ホーム画面
  │   ├── lessons.tsx          # レッスン一覧
  │   ├── task.tsx             # タスク一覧
  │   ├── ai-lesson.tsx        # AIレッスン
  │   └── schedule.tsx         # スケジュール
  ├── (lesson-detail)/         # レッスン詳細
  ├── features/                # 機能モジュール
  ├── components/              # 共通コンポーネント
  ├── chat-room.tsx            # チャットルーム
  ├── chat-room-form.tsx       # チャットルーム作成
  ├── consult-ai.tsx           # AI相談機能
  └── navigation/              # ナビゲーション
```


## TECH STACK

- **文字起こし**: OpenAI Whisper API
- **要約生成**: Dify API
- **AI対話**: Dify API
- **バックエンド**: Firebase (Functions, Firestore, Storage)
- **フロントエンド**: React Native with Expo
- **デプロイ**: Firebase Hosting, Expo EAS
- **ランタイム**: Node.js 20 (注意: Node.js 18 は 2025-04-30 に非推奨、2025-10-31 に廃止予定)
- **テスト**: Jest, React Native Testing Library, @testing-library/jest-native, jest-expo, detox, react-native-iap
- **その他**: lodash, @react-native-async-storage/async-storage, @types/lodash, ts-jest, react-native-iap, react-native-community/cli-platform-ios, @react-native-community/cli-platform-ios, react-native-svg, react-native-iap, react-native-error-boundary, react-native-fs, react-native-get-random-values, @react-native-google-signin/google-signin, react-native-keyboard-aware-scroll-view, react-native-view-shot
- **アイコン生成**: Canva, Figma
- **スプラッシュスクリーン**: (追加)
- **アプリのバージョン**: 0.0.2 (更新)
- **バンドルID**: com.regnition.appli (追加)
- **パッケージ名**: com.regnition.appli (Android)
- react-native-iap
- expo-router@4.0.20
- react-native-error-boundary@1.2.3
- expo-router@^4.0.19


## PROJECT-SPECIFIC STANDARDS

- レッスンデータの`pieces`パラメータは必ずJSON文字列として渡す


## WORKFLOW & RELEASE RULES

- 新しいパッケージを追加したら必ず `package.json` を更新してコミットする。
- 新しいブランチを作成し、作業を行う。
- 作業が完了したらプルリクエストを作成する。
- 認証状態の永続化：Firebase認証の永続性を設定し、ログイン情報をローカルストレージに保存する。
-  Node.jsバージョンアップデートを考慮し、適切なバージョン管理を行う。
- 認証状態の永続化：Firebase認証の永続性を設定し、ログイン情報をローカルストレージに保存する。
- 使用する画面遷移メソッドは`router.navigate`を使用する。`router.replace`は使用しない。ただし、オンボーディング完了後のホーム画面遷移は`router.replace`を使用する。
- アプリ起動時、二回目以降のユーザーはログイン画面をスキップする。AsyncStorageを使用してログイン状態を保持する。
- オンボーディング画面からホーム画面への遷移は`router.navigate`を使用する。`router.replace`は使用しない。
- オンボーディング完了後のホーム画面遷移は`router.replace('/')`を使用する。
- アプリのビルドとストア公開手順は`2025-04-09_22-03-アプリのビルドとストア公開.md`を参照
- **App StoreとGoogle Play Storeへの公開手順**: `2025-04-09_22-03-アプリのビルドとストア公開.md`を参照
- アプリアイコンの更新：`assets/images/icon.png`, `assets/images/adaptive-icon.png`, `assets/images/favicon.png` を更新する。
- スプラッシュスクリーンの設定を`app.config.js`に追加する。
- アプリバージョン：0.0.2 (更新)
- アプリのバンドルIDを `com.regnition.appli` に変更する。(追加)
- バンドルID: com.regnition.appli
- 音声アップロード中のキャンセル機能を追加する


## REFERENCE EXAMPLES

(No existing content. Add reference examples here.)


## PROJECT DOCUMENTATION & CONTEXT SYSTEM

- **プライバシーポリシー**: 2025/03/21に第一版が作成されました。  `app/privacy-policy.tsx`ファイルを参照してください。  最終更新日：第一版 [2025/03/21]
- **利用規約**: 2025/03/21に第一版が作成されました。 `app/terms-of-service.tsx`ファイルを参照してください。  最終更新日：第一版 [2025/03/21]
- **データ構造**: レッスンデータと練習メニューデータのスキーマは`project-rules.md`を参照。
- **ヘルプとサポート**: `app/help-support.tsx`ファイルを参照してください。
- **設定画面バージョン**: 0.0.2 (更新)
- **設定画面開発者**: Regnition inc.
- **テスト環境構築**: TESTING.md, E2E-TESTING.mdを参照


## DEBUGGING

- AsyncStorageの確認方法：アプリのログ出力、またはAsyncStorage専用のデバッグツールを使用する。
- 認証エラーのデバッグ：Firebaseコンソールで認証ログを確認する。
- React Hooksルール違反の修正: `useEffect`の依存配列に`router`を追加する
- useEffectの依存配列に`router`を追加する必要があるケースがあります。`app/navigation/types.ts`ファイルを参照してください。
- Firestoreのセキュリティルールを確認する：Firebaseコンソールの「Firestore Database」→「ルール」タブで確認し、エラー報告の書き込み権限を確認・付与する。
- ContextNavigatorコンポーネントのエラーはExpo Routerの内部エラーであり、アプリコードでの修正は困難です。デバッグモードでのみ表示され、本番環境には影響しません。エラーバウンダリにより、問題発生時の適切なハンドリングが確保されています。次のExpo Routerアップデートを待ちましょう。
-  `ContextNavigator`コンポーネントに関するエラーはExpo Routerの内部エラーであり、アプリコードでの修正は困難です。デバッグモードでのみ表示され、本番環境には影響しません。エラーバウンダリを追加することで、問題発生時の適切なハンドリングが確保されています。次のExpo Routerアップデートを待ちましょう。


## FINAL DOs AND DON'Ts

- 新しいパッケージを追加したら必ず `package.json` を更新してコミットする。
- Firestoreでは、レッスンコレクションとタスクコレクションにユーザーベースのセキュリティ強制
- `pieces`パラメータは必ずJSON文字列として渡す
- API キーはSecret Managerで管理
- クライアント側での大きなファイルのアップロード時は適切な警告表示
- 管理機能へのアクセスは管理者権限を持つユーザーのみに制限
- タスク機能は削除されましたが、`app/components/deprecated`フォルダに関連ファイルは残されています。必要に応じて復元可能です。復元手順は、`app/tabs/_layout.tsx` にタスクタブを再追加、`app/_layout.tsx` にタスク関連ルーティングを復元、`app/components/deprecated` から必要なタスク関連コンポーネントを元の場所に戻す、`store/tasks.ts` を再実装、タスク関連の画面ファイルを復元です。
- 練習メニュー作成画面の注意書きは「開発中」とする。
- レッスン詳細画面、練習メニュー作成画面、タスクタブは「開発中」として表示する。
- ホーム画面のフローティングボタンの「タスク」ラベルは「練習」に変更する。
- ホーム画面の「AIおすすめの練習メニュー」セクションは「AI練習プラン」に変更する。
- ホーム画面の「AI練習プラン」セクションは「開発中」とする。
- 音声文字起こしはWhisper APIを使用し、長時間音声は10分間隔（20秒オーバーラップ）で分割
- 要約はDify APIを使用
- タグは3つの個別単語として生成（不足する場合は楽器名で補完）
- 「AI Instructions」フィールド（最大100文字）を使用してAI要約プロセスをカスタマイズ可能
- 練習メニュー生成機能はDify APIとOpenAI APIを併用して実装
- 複数のアクセスポイント（タスクタブ、レッスン詳細画面、チャット画面、ホーム画面）から練習メニュー生成機能にアクセス可能
- Dify APIの設定を適切に行うこと。設定不足の場合、AIレコメンデーションの取得に失敗します。
- 設定画面のサブスクリプション管理画面に、戻るボタンを追加する。
- 設定画面のバージョンを0.0.2にする。(更新)
- 設定画面の開発者を「Regnition inc.」に変更する。
- 設定画面の開発者情報のデザインを調整し、テキストのディセンダーが切れないようにする。
- 設定画面のサブスクリプション管理画面には、コンテンツ領域に直接戻るボタンを追加する。
- 最大音声時間: 90分
- 最大ファイルサイズ: 100MB
- 25MB以上のファイルは10分単位（20秒オーバーラップ）で分割処理
- 30MB以上のファイルアップロードはWi-Fi接続でない場合、ユーザーに警告を表示する必要があります。
- Firebase関数のリージョンはasia-northeast1にする必要があります。
- processAudioOnUpload関数の設定: メモリ4GB、タイムアウト60分、最大インスタンス数50
- generateTasksFromLessons関数の設定: メモリ4GB、タイムアウト300秒、最大インスタンス数10
- APIコールには堅牢なエラーハンドリングとロギング、失敗したAPI呼び出しには指数バックオフによる再試行メカニズムを実装する必要があります。
- プライバシーポリシーと利用規約は`app/privacy-policy.tsx`と`app/terms-of-service.tsx`に作成済みです。設定画面からアクセスできるようにルーティングを設定する必要があります。
- プライバシーポリシーと利用規約ページには、最下部にも戻るボタンを追加する。
- ヘルプとサポートページを実装する。
- 設定画面の「キャッシュ管理」機能は未実装です。
- HOME画面のピックアップタスクからタスク詳細画面への遷移パスを修正する。`/task-detail`を使用する。
- オンボーディング画面の最後のページ、「練習タスク管理」を「練習管理（開発中）」に変更する。
- 設定画面からオンボーディング画面に遷移できるようにする。
- オンボーディング画面に各タブの使い方を追加する。
- AsyncStorageはユーザーのログイン情報を保存するために使用されます。
- レッスンカードでの選択マークとゴミ箱アイコンの重なりを修正する。
- タスク生成機能は開発中であることを明記する。
- ナビゲーションバーの高さを低くする。
- オンボーディング完了後のホーム画面への遷移は、`router.replace('/')` を使用する。
- AsyncStorageを使用してユーザーのログイン情報を保存する。
- レッスンカードの選択マークとゴミ箱アイコンの重なりを修正する。
- タスク生成機能は開発中であることを明記する。
- ナビゲーションバーの高さを低くする。
- オンボーディング画面に各タブの使い方を追加しました。
- レッスンカードを長押しした時に出るボタンの位置を調整しました。
- レッスンカードを長押しした時に出るボタンの後ろの白の背景を削除しました。
- オンボーディング画面からホーム画面への遷移は、`router.navigate`を使用する。
- HOME画面のピックアップタスクからタスク詳細画面への遷移パスは`/task-detail`を使用する。
- 設定画面からオンボーディング画面への遷移を追加する。
- オンボーディング画面の最後のページのタイトルを「練習タスク管理」から「練習管理（開発中）」に変更する。
- レッスンカードの長押し時の選択マークとゴミ箱アイコンの重なりを修正する。
- タスク生成機能は開発中であることを明記する。
- 設定画面にオンボーディング画面へのリンクを追加する。
- オンボーディング画面の「練習タスク管理」を「練習管理（開発中）」に変更する。
- レッスンカードの長押し時のボタン位置調整、背景削除。
- タスク生成ボタンを練習生成に変更
- レッスン登録画面に「利用規約に同意」のチェックボックスを追加する。
- タブバーの高さを低くする。
- アプリのビルドとストア公開手順：`2025-04-09_22-03-アプリのビルドとストア公開.md`を参照
- **テスト環境構築**: JestとReact Native Testing Libraryを使用する。テストは`__tests__`ディレクトリに配置する。  `jest.config.js`ファイルと`jest.setup.js`ファイルが作成され、必要なモックが追加されました。  Firebase Functionsのテストは`functions/src/__tests__`ディレクトリに配置します。 `functions/jest.config.js`ファイルも作成されました。
- **テスト環境構築**: Jest, React Native Testing Library, @testing-library/jest-native, jest-expo を使用します。テストファイルは `__tests__` ディレクトリに配置します。 `jest.config.js` と `jest.setup.js` ファイルが作成され、必要なモックが追加されました。Firebase Functions のテストは `functions/src/__tests__` ディレクトリに配置し、 `functions/jest.config.js` ファイルも作成します。  Node.js バージョンは 20 を使用します。  `.nvmrc` ファイルを作成してバージョンを指定します。
- **ユニットテスト**: TESTING.mdを参照
- **E2Eテスト**: E2E-TESTING.mdを参照
- **テスト環境**: TESTING.mdとE2E-TESTING.mdを参照。`yarn test`でユニットテスト、`yarn e2e`でE2Eテストを実行できます。
- **テスト環境**: TESTING.mdとE2E-TESTING.mdを参照。`yarn test --testPathIgnorePatterns=functions`でユニットテスト、`yarn e2e`でE2Eテストを実行できます。
- **テスト環境**: プロジェクトには以下のテスト環境が設定されています：
    - **ユニットテスト環境**: Jestテストフレームワーク, React Native Testing Library, Firebase Functions Test. 詳細なテスト環境の設定と実行方法は以下のドキュメントを参照してください：[テスト導入ガイド](./TESTING.md) - ユニットテストおよび統合テストのセットアップと実行方法, [E2Eテスト環境セットアップガイド](./E2E-TESTING.md) - エンドツーエンドテスト環境の構築と実行方法。テスト実行: `yarn test` (ユニットテスト), `yarn e2e` (E2Eテスト)
- **テスト環境**: プロジェクトには以下のテスト環境が設定されています：
    - **ユニットテスト環境**: Jestテストフレームワーク, React Native Testing Library, Firebase Functions Test. 詳細なテスト環境の設定と実行方法は以下のドキュメントを参照してください：[テスト導入ガイド](./TESTING.md) - ユニットテストおよび統合テストのセットアップと実行方法, [E2Eテスト環境セットアップガイド](./E2E-TESTING.md) - エンドツーエンドテスト環境の構築と実行方法。テスト実行: `yarn test --testPathIgnorePatterns=functions` (ユニットテスト), `yarn e2e` (E2Eテスト)
- **テスト環境**: プロジェクトには以下のテスト環境が設定されています：
    - **ユニットテスト環境**: Jestテストフレームワーク, React Native Testing Library, Firebase Functions Test. 詳細なテスト環境の設定と実行方法は以下のドキュメントを参照してください：[テスト導入ガイド](./TESTING.md) - ユニットテストおよび統合テストのセットアップと実行方法, [E2Eテスト環境セットアップガイド](./E2E-TESTING.md) - エンドツーエンドテスト環境の構築と実行方法。テスト実行: `yarn test --testPathIgnorePatterns=functions` (ユニットテスト), `yarn e2e` (E2Eテスト)
  - E2Eテスト用のスクリプトが`package.json`に追加されました: `yarn e2e:ios`, `yarn e2e:android`, `yarn e2e`
  - プロジェクトには以下のテスト環境が設定されています：
    - **ユニットテスト環境**: Jestテストフレームワーク, React Native Testing Library, Firebase Functions Test. 詳細なテスト環境の設定と実行方法は以下のドキュメントを参照してください：[テスト導入ガイド](./TESTING.md) - ユニットテストおよび統合テストのセットアップと実行方法, [E2Eテスト環境セットアップガイド](./E2E-TESTING.md) - エンドツーエンドテスト環境の構築と実行方法。テスト実行: `yarn test --testPathIgnorePatterns=functions` (ユニットテスト), `yarn e2e` (E2Eテスト)
  - プロジェクトには以下のテスト環境が設定されています：
    - **ユニットテスト環境**: Jestテストフレームワーク, React Native Testing Library, Firebase Functions Test. 詳細なテスト環境の設定と実行方法は以下のドキュメントを参照してください：[テスト導入ガイド](./TESTING.md) - ユニットテストおよび統合テストのセットアップと実行方法, [E2Eテスト環境セットアップガイド](./E2E-TESTING.md) - エンドツーエンドテスト環境の構築と実行方法。テスト実行: `yarn test --testPathIgnorePatterns=functions` (ユニットテスト), `yarn e2e` (E2Eテスト)
    - **E2Eテスト環境**: Detox.  設定と実行方法は[E2Eテスト環境セットアップガイド](./E2E-TESTING.md)を参照。テスト実行: `yarn e2e:ios`, `yarn e2e:android`, `yarn e2e`
- スプラッシュスクリーンを追加する。
- スプラッシュスクリーンの設定を`app.config.js`に追加する必要があります。  `splash.png`を`assets`フォルダに配置し、`app.config.js`に以下の設定を追加します。
-```javascript
-----splash: {
-----  image: "./assets/splash.png",
-----  resizeMode: "contain",
-----  backgroundColor: "#ffffff"
-----}
-```
--- アプリのバージョンを 0.0.1 に設定する
--- アプリのバンドルIDを `com.regnition.appli` に変更する。
--- GoogleクライアントIDの更新が必要
--- バンドルIDを `com.regnition.appli` に変更しました。
--- アプリバージョン: 0.0.2 (更新)
--- バンドルID: com.regnition.appli
--- パッケージ名: com.regnition.appli (Android)
--- スプラッシュスクリーン設定追加: app.config.jsに`splash`セクションを追加
--- アプリバージョン: 0.0.2 (更新)
--- バンドルID: com.regnition.appli
--- パッケージ名: com.regnition.appli (Android)
--- スプラッシュスクリーンを追加しました。`assets/splash.png` を作成し、`app.config.js` に設定を追加しました。背景色は`#121212`に設定。
--- GoogleクライアントIDの更新が必要
----- アプリバージョン: 0.0.2 (更新)
----- バンドルID: com.regnition.appli
----- パッケージ名: com.regnition.appli (Android)
----- スプラッシュスクリーンを追加しました。 `assets/splash.png` を作成し、`app.config.js` に設定を追加しました。背景色は`#121212`に設定。GoogleクライアントIDの更新が必要。
-+ アプリバージョン: 0.0.2 (更新)
-+ バンドルID: com.regnition.appli
-+ パッケージ名: com.regnition.appli (Android)
-+ スプラッシュスクリーンを追加しました。 `assets/splash.png` を作成し、`app.config.js` に設定を追加しました。背景色は`#121212`に設定。GoogleクライアントIDの更新が必要。
-+ アプリバージョン: 0.0.2 (更新)
-+ バンドルID: com.regnition.appli
-+ パッケージ名: com.regnition.appli (Android)
-+ スプラッシュスクリーンを追加しました。 `assets/splash.png` を作成し、`app.config.js` に設定を追加しました。背景色は`#121212`に設定。GoogleクライアントIDの更新が必要。
-+ アプリバージョン: 0.0.2 (更新)
-+ バンドルID: com.regnition.appli
-+ パッケージ名: com.regnition.appli (Android)
-+ スプラッシュスクリーンを追加しました。 `assets/splash.png` を作成し、`app.config.js` に設定を追加しました。背景色は`#121212`に設定。GoogleクライアントIDの更新が必要。
-+ アプリバージョン: 0.0.2 (更新)
-+ バンドルID: com.regnition.appli
-+ パッケージ名: com.regnition.appli (Android)
-+ スプラッシュスクリーンを追加しました。 `assets/splash.png` を作成し、`app.config.js` に設定を追加しました。背景色は`#121212`に設定。GoogleクライアントIDの更新が必要。
+ スプラッシュスクリーンを追加しました。`assets/splash.png` を作成し、`app.config.js` に設定を追加しました。背景色は`#121212`に設定。GoogleクライアントIDの更新が必要。  アプリアイコンも更新済み。
+ アプリのバージョンを 0.0.2 に設定する
+ アプリのバンドルIDを `com.regnition.appli` に変更する
+ GoogleクライアントIDの更新が必要
+ スプラッシュスクリーンを追加しました。`assets/splash.png` を作成し、`app.config.js` に設定を追加しました。背景色は`#121212`に設定。
+ GoogleクライアントIDの更新が必要
+ アプリアイコンとスプラッシュスクリーンを追加、バージョンを0.0.2に変更、バンドルIDをcom.regnition.appliに更新
+ アプリアイコンとスプラッシュスクリーンを追加、バージョンを0.0.2に変更、バンドルIDを更新
+ レッスン登録画面で利用規約への同意を必須項目にする
+ 音声アップロード中のキャンセル機能を追加する
+ アプリ内サブスクリプション機能を実装する
+ App StoreとGoogle Playのサブスクリプション管理へのリンクを追加する
+ ログイン画面のアプリ名を「Resonote」に変更する。(更新)
+ 設定画面のバージョン表示を0.0.2に変更する
+ ログイン画面のテストユーザーボタンを一時的に非表示にする
+ 設定画面のGoogleクライアントIDの更新が必要
+ Googleログインボタンのディセンダーが切れている問題を修正する
+ GoogleログインボタンにGoogleアイコンを追加
+ ログイン画面のアプリ名とテストユーザーボタンを更新
+ 設定画面の「サブスクリプション管理」セクションを非表示にする
+ Firebase認証の永続化を設定し、AsyncStorageを使用する。
+ 設定画面にエラー報告機能を追加する。エラー報告内容はFirestoreに保存する。
+ レッスン登録画面で利用規約への同意を必須にする
+ 音声アップロードのキャンセル機能を追加する

- レッスン登録画面で利用規約への同意を必須にする
- 音声アップロードのキャンセル機能を追加する
+ レッスン登録画面で利用規約への同意を必須にする
+ 音声アップロードのキャンセル機能を追加する
+ 設定画面の「サブスクリプション管理」を非表示にする
+ ログイン画面のアプリ名を「Resonote」に変更する
+ ログイン画面の「テストユーザー」ボタンを一時的に非表示にする
+ 設定画面にエラー報告機能を追加する。エラー報告内容はFirestoreに保存する。
+ アプリアイコンが反映されていなかった問題を修正する。
+ 文字起こしエラーを修正する。
+ 認証ヘッダーに不正な文字が含まれていた問題を修正する。
+ OpenAI APIのクォータ制限に達していた問題を修正する。
+ サブスクリプション管理機能を実装する。
+ 各ストア（App StoreとGoogle Play）のサブスクリプション管理へのリンクを追加する。
+ Firebase認証の永続化を設定し、アプリを閉じてもログイン状態が維持されるようにする。

+ **`app/navigation/types.ts`ファイルの更新**: `useRouter`が依存関係に追加されました。

+ Firestoreのセキュリティルールにエラー報告コレクションへの書き込み権限を追加する必要があります。
+ Firestoreセキュリティルールを更新しました。エラー報告コレクションへの書き込み権限を追加しました。

+ **データ構造の追加**: `project-rules.md`にレッスンデータと練習メニューデータのスキーマを追加しました。
+ **エラーハンドリングの改善**:  `app/App.tsx`に`react-native-error-boundary`を追加し、エラーバウンダリを実装しました。
+ **Firestoreセキュリティルールの修正**:  匿名ユーザーによるエラー報告の送信を許可するように`firestore.rules`を更新しました。

+ **プロジェクトルール追加**: レッスン管理システムのプロジェクトルールを追加しました。これは、プロジェクトの概要、技術スタック、データ構造、機能制限とガイドライン、UI/UXガイドライン、コード構造、セキュリティとベストプラクティス、実装時の重要事項に関する情報を網羅しています。

+ アプリのバージョンを 0.0.2 に設定する。 Apple側でもバージョンを 0.0.2 に更新する必要がある。