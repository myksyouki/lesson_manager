---
description: 
globs: 
alwaysApply: true
---
# 機能開発ガイドライン（Cursor Agent向け）

以下は、CursorがAgentモードで自律的に機能開発を行う際に確認すべきルールです。

## 1. 設計ドキュメントの確認と更新
- 開発前に必ず `docs` フォルダの既存の設計書やADRを参照する。
- 新規機能の場合は、実装前に設計書を作成し、`docs` に追加する。
- 既存機能に変更を加える際は、設計書やADRを必ず更新する。

## 2. コミットメッセージ
- コミットメッセージはリポジトリ内の `.commit_template` を参照し、その形式に従う。

## 3. 複数行コミットメッセージのルール
- 1行目は `.commit_template` のEmojiリストから適切な絵文字を選び、簡潔なサマリーを記載する。
- 2行目は空白行を挿入し、以降の内容と明確に区切る。
- 3行目以降のボディには、変更の詳細を箇条書きや簡潔な文章で記載する。
- ボディでは変更理由・影響範囲・検討した代替案などを適切に説明する。

## 4. テストの実施
- すべての新機能には自動テストを作成する。
- テスト実装においてはモックを最低限にとどめ、既存のモデルやFactoryBotを使用し、実際のデータやアプリケーションの挙動に近いテストを行う。
- 外部APIへの依存がある機能のテストでは、依存性の注入パターンを使用し、Fakeサービスクラスで置き換えることで外部APIの呼び出しを防ぐ。
- モックやスタブを使用する場合は、その理由を設計書に明記する。
- テストが難しい場合は理由を設計書に明記する。

## 5. マイグレーションとデータベース変更
- DBスキーマの変更時はマイグレーションを作成し、動作確認を行う。
- DB変更手順を設計書または運用ドキュメントに記載する。

## 6. エラーハンドリングとログ
- エラーケースや重要処理には明示的なログを残す。
- 障害対応やモニタリングのため、ログメッセージは具体的に記述する。

## 7. 依存関係・影響範囲
- 機能の実装や変更時は、必ず他機能やシステムへの影響範囲を確認し、設計書に記録する。

## 8. 振り返りとフィードバック
- 開発完了後、実装結果についてのフィードバックを収集し、設計書に追記する。
- 次回の改善のため振り返り結果を記録する。

## 9. 作業ログの記録場所
- 作業ログや振り返り・フィードバックなどの記録は、`work_logs` フォルダに保存する。
- ファイル名は `[日付]_[機能名]_log.md` の形式で統一する（例: `20250314_user-login_log.md`）。

## 10. 作業ログの活用
- 新しい機能開発や改善を開始する前に、関連する過去の作業ログを必ず確認する。
- 過去に発生した問題や改善策を設計時点で反映し、同じ課題が繰り返されないようにする。
- 作業ログ内の有効な知見や学びは設計書やADRに取り込み、ノウハウとして体系化する。

## 11. ファイルサイズと構造のルール
- 1つのファイルやクラスのサイズはコンパクトに維持し、責務が複数ある場合は分割を検討する。
- 原則として、1ファイルは200行以内を目安とし、超える場合は設計書で分割案を記載する。
- 複雑な処理や複数の責務がある場合は、明確に分離し別ファイルに抽出することでAIが適切に文脈を理解できるようにする。