---
description: レッスン管理システムのプロジェクトルール
globs: 
alwaysApply: false
---
# Resonote: 音楽レッスン・練習総合AIアシスタント

## プロジェクト概要

Resonoteは、ユーザーが音楽レッスンの録音をアップロードするとOpenAI Whisper APIで文字起こしし、Dify APIで要約・タグ付けを自動生成します。バックエンドにFirebase Functions/Firestore/Storageを採用し、フロントエンドはReact Native (Expo)およびExpo RouterでAndroid/iOS/Web向けにクロスプラットフォーム対応。AIはレッスンデータと練習履歴を分析し、個々のユーザーに最適化された練習メニューを提案。また、AI相談機能、管理者用管理画面、サブスクリプション管理機能も備えた総合アプリケーションです。

## 技術スタック

- **文字起こし**: OpenAI Whisper API
- **要約生成**: Dify API
- **AI対話**: Dify API
- **バックエンド**: Firebase (Functions, Firestore, Storage)
- **フロントエンド**: React Native with Expo, Expo Router@^4.0.20
- **デプロイ**: Firebase Hosting, Expo EAS
- **ランタイム**: Node.js 20 (注意: Node.js 18 は 2025-04-30 に非推奨、2025-10-31 に廃止予定)
- **パッケージ管理**: Yarn@1.22.22 (ルート: yarn.lock) / npm (functions: package-lock.json)

## コードスタイルガイドライン
- インデント: スペース2つ
- クォート: シングルクォートを使用
- セミコロン: 行末に必須
- ESLint: `.eslintrc.js` に従う
- Prettier: `.prettierrc` に従う
- 型安全: TypeScript を必須とし、インターフェースを明示的に定義する

## データ構造

### レッスンデータ

```typescript
interface Lesson {
  // 基本情報
  id: string;
  title: string;
  date: Timestamp;
  instrument: string;
  teacherName?: string;
  user_id: string;
  
  // 音声処理関連
  audioUrl?: string;
  audioPath?: string;
  audioFileName?: string;
  fileName?: string;
  audioDuration?: number;
  audioSize?: number;
  transcription?: string;
  summary?: string;
  tags?: string[];
  
  // 処理状態管理
  status?: "pending" | "processing" | "completed" | "error";
  summaryRequired: boolean;
  summaryInProgress: boolean;
  processingProgress?: number;
  processingMessage?: string;
  processingTimeSeconds?: number;
  transcriptionCompleteTime?: Timestamp;
  transcriptionId?: string;
  processingId?: string;
  lockAcquiredAt?: Timestamp;
  
  // アーカイブ関連
  isArchived: boolean;
  archivedDate?: Timestamp;
  isFavorite?: boolean;
  
  // その他
  pieces?: string; // JSON文字列として保存
  aiInstructions?: string; // 最大100文字
  notes?: string;
  
  // 時間情報
  createdAt: Timestamp;
  updatedAt: Timestamp;
}
```

### 練習メニューデータ

```typescript
// 練習メニューコレクション
interface PracticeMenu {
  id: string;                // ドキュメントID
  title: string;             // メニュータイトル
  description: string;       // 詳細説明
  instrument: string;        // 対象楽器
  category: string;          // カテゴリ（基礎練習/テクニック/表現など）
  difficulty: string;        // 難易度（初級/中級/上級）
  duration: number;          // 所要時間（分）
  sheetMusicUrl?: string;    // 楽譜URL
  videoUrl?: string;         // 解説動画URL（オプション）
  steps: PracticeStep[];     // 練習ステップ
  tags: string[];            // 検索用タグ
  createdAt: Timestamp;      // 作成日時
  updatedAt: Timestamp;      // 更新日時
}

// 練習ステップ
interface PracticeStep {
  id: string;                // ステップID
  title: string;             // ステップ名
  description: string;       // 詳細説明
  duration: number;          // 所要時間（分）
  orderIndex: number;        // 順序
}

// 楽譜データモデル
interface SheetMusic {
  id: string;                // 楽譜ID
  title: string;             // タイトル
  svgContent: string;        // SVG形式の楽譜データ
  instrumentId: string;      // 対象楽器ID
  difficulty: string;        // 難易度
  tags: string[];            // 検索用タグ
  createdAt: Timestamp;      // 作成日時
  updatedAt: Timestamp;      // 更新日時
}
```

## 機能制限とガイドライン

### 音声処理

- **最大音声時間**: 90分
- **最大ファイルサイズ**: 100MB
- **大きなファイル処理**:
  - 25MB以上: ファイルを10分単位（20秒オーバーラップ）で分割処理
  - 30MB以上: Wi-Fi接続でない場合はユーザーに警告表示
- **タグ生成**: 3つの個別単語（不足する場合は楽器名で補完）

### Firebase関数設定

- **リージョン**: asia-northeast1 (必須)
- **processAudioOnUpload関数**:
  - メモリ: 4GB
  - タイムアウト: 60分
  - 最大インスタンス数: 50
- **generateTasksFromLessons関数**:
  - メモリ: 4GB
  - タイムアウト: 300秒
  - 最大インスタンス数: 10
- **エラー処理**:
  - APIコールには堅牢なエラーハンドリングとロギング
  - 失敗したAPI呼び出しには指数バックオフによる再試行メカニズム

## UI/UXガイドライン

### 画面構成

- **オンボーディング画面**：初回起動時にステップ形式でアプリ機能を紹介し、完了後は`router.replace('/')`でホーム画面へ遷移する。
- **ホーム画面 (`/`)**：スクロール可能、フローティングボタンは「練習」ラベル、AI練習プランセクションを表示、開発中バッジを付与。
- **レッスン一覧画面 (`/lessons`)**：一覧表示、アーカイブタブ切替、検索フィルタ機能、レッスンカードタップで詳細へ遷移（`router.navigate`）。
- **レッスン作成画面 (`/lesson-form`)**：入力フォーム、利用規約同意チェックボックス必須、バリデーション後に保存。
- **レッスン詳細画面 (`/(lesson-detail)/[id]`)**：文字起こし・要約・タグ表示、練習メニュー生成ボタン、AI相談ボタンを配置。
- **AIレッスンタブ (`/ai-lesson`)**：チャット形式の相談UI、楽器別プリセット、会話中にタスク生成リンクを提供。
- **タスク一覧画面 (`/task`)**：完了済みフィルタ、有効/無効切替、長押しで選択モードを開始。
- **タスク作成画面 (`/task-form`)**：タスクタイトル、カテゴリ、所要時間等の入力、保存・キャンセル。
- **タスク詳細画面 (`/task-detail`)**：タスク情報表示および完了ボタンを配置。
- **サブスクリプション管理画面 (設定内)**：App Store・Google Playのリンク、課金ステータス表示、管理用UI。
- **設定画面 (`/settings`)**：アカウント情報、サブスクリプション管理、キャッシュクリア、ログアウト。
- **プライバシーポリシー／利用規約 (`/privacy-policy`, `/terms-of-service`)**：長文スクロール、上下両端に戻るボタンを配置。
- **ヘルプ＆サポート画面 (`/help-support`)**：FAQ、問い合わせフォーム、バージョン情報を表示。
- **管理者画面 (`/admin`)**：練習メニュー登録・ユーザー管理・システム設定機能を提供。

## コード構造

### 関数フォルダ構造

```
functions/src/
  ├── index.ts                 # メインエントリーポイント
  ├── config/                  # 設定
  │   └── index.ts             # 設定
  ├── summaries/               # 要約関連機能
  │   ├── index.ts             # 要約機能のエクスポート
  │   ├── triggers.ts          # ストレージ/Firestoreトリガー
  │   ├── processor.ts         # 主要な要約処理ロジック
  │   ├── transcriber.ts       # 文字起こし機能
  │   └── generator.ts         # 要約/タグ生成機能
  ├── practice-menu/           # 練習メニュー関連機能
  │   ├── index.ts             # 練習メニュー機能のエクスポート
  │   ├── genkit.ts            # AI連携処理
  │   └── models.ts            # 練習メニューのデータモデル
  ├── tools/                   # 管理ツール
  │   └── admin-setup.ts       # 管理者設定機能
  └── common/                  # 共通ユーティリティ
      ├── storage.ts           # ストレージ操作
      ├── firestore.ts         # Firestore操作
      ├── audio.ts             # 音声ファイル操作
      ├── llm.ts               # AI/LLM共通処理
      ├── errors.ts            # エラー処理
      ├── secret.ts            # シークレット管理
      └── dify.ts              # Dify API連携機能
```

### アプリフォルダ構造

```text
app/
  ├── _layout.tsx              # メインレイアウト
  ├── index.tsx                # エントリーポイント
  ├── profile.tsx              # プロフィール画面
  ├── privacy-policy.tsx       # プライバシーポリシー画面
  ├── terms-of-service.tsx     # 利用規約画面
  ├── onboarding.tsx           # オンボーディング画面
  ├── lesson-form.tsx          # レッスン作成画面
  ├── task-form.tsx            # タスク作成画面
  ├── task-detail.tsx          # タスク詳細画面
  ├── help-support.tsx         # ヘルプ＆サポート画面
  ├── error-report.tsx         # エラー報告画面
  ├── auth/                    # 認証関連画面
  │   ├── login.tsx
  │   ├── register.tsx
  │   └── forgot-password.tsx
  ├── subscription/            # サブスクリプション管理
  │   ├── subscription.tsx
  │   └── settings.tsx
  ├── tabs/                    # メインタブ
  │   ├── _layout.tsx          # タブレイアウト
  │   ├── index.tsx            # ホーム画面
  │   ├── lessons.tsx          # レッスン一覧
  │   ├── task.tsx             # タスク一覧
  │   ├── ai-lesson.tsx        # AIレッスン
  │   └── schedule.tsx         # スケジュール
  ├── admin/                   # 管理者画面
  │   └── admin.tsx
  ├── (lesson-detail)/         # レッスン詳細
  │   ├── theme-settings.tsx
  │   ├── shared-audio.tsx
  │   ├── sync.tsx
  │   ├── notifications.tsx
  │   ├── instrument-settings.tsx
  │   └── language.tsx
  ├── navigation/              # ナビゲーション
  │   └── generate-tasks.tsx
  ├── features/                # 機能モジュール
  │   ├── consult-ai.tsx
  │   └── chat-room.tsx
  ├── components/              # 共通コンポーネント
  │   ├── chat-room-form.tsx
  │   └── api-settings.tsx
  └── analysis/                # 分析・ルート
      ├── +not-found.tsx
      └── App.tsx
```

## セキュリティとベストプラクティス

- Firestoreでは、タスクとレッスンのコレクションにユーザーベースのセキュリティ強制
- `pieces`