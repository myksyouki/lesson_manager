import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  ScrollView,
  TouchableOpacity,
  Platform,
  SafeAreaView,
  KeyboardAvoidingView,
  ActivityIndicator,
  Alert,
  Modal,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { useAuthStore } from './store/auth';
import { getChatRoom, addMessageToChatRoom, ChatRoom } from './services/chatRoomService';
import { sendMessageToLessonAI, ChatMessage, createPracticeMenu } from './services/difyService';
import { createTaskFromPracticeMenu } from './services/taskService';

export default function ChatRoomScreen() {
  const { id } = useLocalSearchParams<{ id: string }>();
  const [chatRoom, setChatRoom] = useState<ChatRoom | null>(null);
  const [message, setMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [sending, setSending] = useState(false);
  const [exporting, setExporting] = useState(false);
  const [practiceMenu, setPracticeMenu] = useState<string | null>(null);
  const [showPracticeMenu, setShowPracticeMenu] = useState(false);
  const scrollViewRef = useRef<ScrollView>(null);
  const router = useRouter();
  const { user } = useAuthStore();

  useEffect(() => {
    if (id && user) {
      loadChatRoom();
    }
  }, [id, user]);

  const loadChatRoom = async () => {
    try {
      setLoading(true);
      if (!id) return;
      
      const room = await getChatRoom(id);
      setChatRoom(room);
    } catch (error) {
      console.error('チャットルーム取得エラー:', error);
      Alert.alert('エラー', 'チャットルームの取得に失敗しました。後でもう一度お試しください。');
    } finally {
      setLoading(false);
    }
  };

  const handleSend = async () => {
    if (!message.trim() || !chatRoom || !user) return;

    try {
      setSending(true);
      
      // ユーザーメッセージをチャットに追加
      const userMessage: ChatMessage = {
        role: 'user',
        content: message.trim(),
      };
      
      await addMessageToChatRoom(chatRoom.id, userMessage, chatRoom.conversationId);
      
      // UIを更新
      setChatRoom(prev => {
        if (!prev) return prev;
        return {
          ...prev,
          messages: [...prev.messages, userMessage],
        };
      });
      
      setMessage('');
      
      // スクロールを一番下に移動
      setTimeout(() => {
        scrollViewRef.current?.scrollToEnd({ animated: true });
      }, 100);

      // Dify APIに送信
      const response = await sendMessageToLessonAI(
        message.trim(),
        chatRoom.conversationId
      );
      
      // AIの応答をチャットに追加
      const aiMessage: ChatMessage = {
        role: 'assistant',
        content: response.answer,
      };
      
      await addMessageToChatRoom(chatRoom.id, aiMessage, response.conversationId);
      
      // UIを更新
      setChatRoom(prev => {
        if (!prev) return prev;
        return {
          ...prev,
          messages: [...prev.messages, aiMessage],
          conversationId: response.conversationId,
        };
      });
      
      // スクロールを一番下に移動
      setTimeout(() => {
        scrollViewRef.current?.scrollToEnd({ animated: true });
      }, 100);
    } catch (error) {
      console.error('メッセージ送信エラー:', error);
      Alert.alert('エラー', 'メッセージの送信に失敗しました。後でもう一度お試しください。');
    } finally {
      setSending(false);
    }
  };

  const handleExport = async () => {
    if (!chatRoom || !user) return;
    
    try {
      setExporting(true);
      
      // チャット履歴が少なすぎる場合は警告
      if (chatRoom.messages.length < 3) {
        Alert.alert(
          '警告',
          'チャット履歴が少なすぎます。もう少しAIと対話してから練習メニューを作成してください。',
          [{ text: 'OK' }]
        );
        setExporting(false);
        return;
      }
      
      // 練習メニュー作成AIに送信
      const result = await createPracticeMenu(chatRoom.messages);
      
      // 練習メニューを表示するためにステートを更新
      setPracticeMenu(result.practiceMenu);
      setShowPracticeMenu(true);
      setExporting(false);
      
    } catch (error) {
      console.error('エクスポートエラー:', error);
      Alert.alert('エラー', '練習メニューの作成に失敗しました。後でもう一度お試しください。');
      setExporting(false);
    }
  };

  const handleSavePracticeMenu = async () => {
    if (!practiceMenu || !chatRoom || !user) return;
    
    try {
      setExporting(true);
      
      // タスクとして保存（複数のタスクが返される可能性あり）
      const createdTasks = await createTaskFromPracticeMenu(user.uid, practiceMenu, chatRoom.id);
      
      // モーダルを閉じる
      setShowPracticeMenu(false);
      
      Alert.alert(
        '成功',
        `${createdTasks.length}個の練習メニューをタスクとして保存しました。タスク画面で確認できます。`,
        [
          {
            text: 'OK',
            onPress: () => console.log('練習メニュー保存完了'),
          },
        ]
      );
    } catch (error) {
      console.error('練習メニューからのタスク作成中にエラーが発生しました:', error);
      Alert.alert('エラー', 'タスクの保存に失敗しました。後でもう一度お試しください。');
    } finally {
      setExporting(false);
    }
  };

  const handleEditPracticeMenu = () => {
    if (!practiceMenu || !chatRoom) return;
    
    // 編集画面に遷移
    router.push({
      pathname: '/task-form',
      params: { 
        practiceMenu: practiceMenu,
        chatRoomId: chatRoom.id
      }
    });
    
    // モーダルを閉じる
    setShowPracticeMenu(false);
  };

  if (loading) {
    return (
      <SafeAreaView style={styles.safeArea}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#007AFF" />
        </View>
      </SafeAreaView>
    );
  }

  if (!chatRoom) {
    return (
      <SafeAreaView style={styles.safeArea}>
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>チャットルームが見つかりませんでした</Text>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => router.back()}
          >
            <Text style={styles.backButtonText}>戻る</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.safeArea}>
      <KeyboardAvoidingView 
        style={styles.container} 
        behavior={Platform.OS === 'ios' ? 'padding' : undefined}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}
      >
        <View style={styles.header}>
          <View style={styles.headerTop}>
            <TouchableOpacity
              style={styles.backButton}
              onPress={() => router.back()}
            >
              <Ionicons name="chevron-back" size={24} color="#007AFF" />
            </TouchableOpacity>
            <Text style={styles.title} numberOfLines={1}>
              {chatRoom.title}
            </Text>
            <TouchableOpacity
              style={[styles.exportButton, exporting && styles.disabledButton]}
              onPress={handleExport}
              disabled={exporting}
            >
              {exporting ? (
                <ActivityIndicator size="small" color="#007AFF" />
              ) : (
                <Text style={styles.exportButtonText}>練習メニュー作成</Text>
              )}
            </TouchableOpacity>
          </View>
          <Text style={styles.topicText}>トピック: {chatRoom.topic}</Text>
        </View>

        <ScrollView 
          style={styles.chatContainer}
          ref={scrollViewRef}
          onContentSizeChange={() => scrollViewRef.current?.scrollToEnd({ animated: true })}
        >
          {chatRoom.messages.map((message, index) => (
            <View
              key={index}
              style={[
                styles.messageContainer,
                message.role === 'user' ? styles.userMessage : styles.aiMessage,
              ]}>
              <Text style={[
                styles.messageText,
                message.role === 'user' ? styles.userMessageText : styles.aiMessageText
              ]}>
                {message.content}
              </Text>
            </View>
          ))}
          {sending && (
            <View style={[styles.messageContainer, styles.aiMessage]}>
              <ActivityIndicator size="small" color="#007AFF" />
            </View>
          )}
        </ScrollView>

        <View style={styles.inputContainer}>
          <TextInput
            style={styles.input}
            value={message}
            onChangeText={setMessage}
            placeholder="メッセージを入力"
            multiline
            editable={!sending}
          />
          <TouchableOpacity
            style={[styles.sendButton, (!message.trim() || sending) && styles.sendButtonDisabled]}
            onPress={handleSend}
            disabled={!message.trim() || sending}>
            <Ionicons
              name="send"
              size={26}
              color={message.trim() && !sending ? '#007AFF' : '#C7C7CC'}
            />
          </TouchableOpacity>
        </View>

        {/* 練習メニュー確認モーダル */}
        <Modal
          visible={showPracticeMenu}
          animationType="slide"
          transparent={true}
          onRequestClose={() => setShowPracticeMenu(false)}
        >
          <View style={styles.modalOverlay}>
            <View style={styles.modalContainer}>
              <View style={styles.modalHeader}>
                <Text style={styles.modalTitle}>AI生成練習メニュー</Text>
                <TouchableOpacity
                  style={styles.modalCloseButton}
                  onPress={() => setShowPracticeMenu(false)}
                >
                  <Ionicons name="close" size={24} color="#8E8E93" />
                </TouchableOpacity>
              </View>
              
              <ScrollView style={styles.practiceMenuContent}>
                <Text style={styles.practiceMenuText}>{practiceMenu}</Text>
              </ScrollView>
              
              <View style={styles.modalFooter}>
                <TouchableOpacity
                  style={styles.modalButton}
                  onPress={handleEditPracticeMenu}
                >
                  <Text style={styles.modalButtonText}>編集してタスク保存</Text>
                </TouchableOpacity>
                
                <TouchableOpacity
                  style={[styles.modalButton, styles.primaryButton]}
                  onPress={handleSavePracticeMenu}
                >
                  <Text style={[styles.modalButtonText, styles.primaryButtonText]}>
                    そのままタスク保存
                  </Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </Modal>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  errorText: {
    fontSize: 18,
    color: '#8E8E93',
    marginBottom: 20,
    textAlign: 'center',
    fontFamily: Platform.OS === 'ios' ? 'Hiragino Sans' : 'Roboto',
  },
  header: {
    paddingTop: Platform.OS === 'ios' ? 10 : 20,
    paddingHorizontal: 16,
    paddingBottom: 16,
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5EA',
  },
  headerTop: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  backButton: {
    padding: 8,
  },
  backButtonText: {
    fontSize: 16,
    color: '#007AFF',
    fontWeight: '600',
    fontFamily: Platform.OS === 'ios' ? 'Hiragino Sans' : 'Roboto',
  },
  title: {
    flex: 1,
    fontSize: 18,
    fontWeight: '700',
    color: '#1C1C1E',
    textAlign: 'center',
    marginHorizontal: 8,
    fontFamily: Platform.OS === 'ios' ? 'Hiragino Sans' : 'Roboto',
  },
  exportButton: {
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 16,
    backgroundColor: '#E5F2FF',
  },
  disabledButton: {
    opacity: 0.5,
  },
  exportButtonText: {
    fontSize: 14,
    color: '#007AFF',
    fontWeight: '600',
    fontFamily: Platform.OS === 'ios' ? 'Hiragino Sans' : 'Roboto',
  },
  topicText: {
    fontSize: 14,
    color: '#8E8E93',
    fontFamily: Platform.OS === 'ios' ? 'Hiragino Sans' : 'Roboto',
  },
  chatContainer: {
    flex: 1,
    padding: 16,
  },
  messageContainer: {
    maxWidth: '85%',
    marginBottom: 16,
    padding: 16,
    borderRadius: 20,
  },
  userMessage: {
    alignSelf: 'flex-end',
    backgroundColor: '#007AFF',
  },
  aiMessage: {
    alignSelf: 'flex-start',
    backgroundColor: 'white',
    ...Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
      android: {
        elevation: 3,
      },
    }),
  },
  messageText: {
    fontSize: 16,
    lineHeight: 22,
    fontFamily: Platform.OS === 'ios' ? 'Hiragino Sans' : 'Roboto',
  },
  userMessageText: {
    color: 'white',
  },
  aiMessageText: {
    color: '#1C1C1E',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    backgroundColor: 'white',
    borderTopWidth: 1,
    borderTopColor: '#E5E5EA',
  },
  input: {
    flex: 1,
    backgroundColor: '#F2F2F7',
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    maxHeight: 120,
    fontFamily: Platform.OS === 'ios' ? 'Hiragino Sans' : 'Roboto',
  },
  sendButton: {
    marginLeft: 12,
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: '#F2F2F7',
    justifyContent: 'center',
    alignItems: 'center',
  },
  sendButtonDisabled: {
    opacity: 0.5,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  modalContainer: {
    backgroundColor: 'white',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    height: '70%',
    ...Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: -2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
      android: {
        elevation: 5,
      },
    }),
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5EA',
    paddingVertical: 16,
    paddingHorizontal: 20,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1C1C1E',
    fontFamily: Platform.OS === 'ios' ? 'Hiragino Sans' : 'Roboto',
  },
  modalCloseButton: {
    position: 'absolute',
    right: 16,
  },
  practiceMenuContent: {
    flex: 1,
    padding: 20,
  },
  practiceMenuText: {
    fontSize: 16,
    lineHeight: 24,
    color: '#1C1C1E',
    fontFamily: Platform.OS === 'ios' ? 'Hiragino Sans' : 'Roboto',
  },
  modalFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 16,
    borderTopWidth: 1,
    borderTopColor: '#E5E5EA',
  },
  modalButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 8,
    backgroundColor: '#F2F2F7',
  },
  primaryButton: {
    backgroundColor: '#007AFF',
  },
  modalButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1C1C1E',
    fontFamily: Platform.OS === 'ios' ? 'Hiragino Sans' : 'Roboto',
  },
  primaryButtonText: {
    color: 'white',
  },
});
