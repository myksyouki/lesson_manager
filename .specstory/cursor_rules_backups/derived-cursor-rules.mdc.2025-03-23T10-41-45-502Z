
## PROJECT OVERVIEW

This project aims to create a lesson management system integrated with AI-powered transcription and summarization features.  The system will allow users to upload audio recordings of lessons, generate summaries and tags, and manage their lesson schedules.  Version updates will be noted in the relevant sections.  OpenAI Whisper API and Google Gemini API are used for transcription and summarization. Google Gemini API was added to the tech stack. Node.js 18 runtime will be deprecated on 2025-04-30 and decommissioned on 2025-10-31.  Consider upgrading to Node.js 20 to avoid disruption.  The maximum audio duration for transcription is 90 minutes. For files larger than 25MB, implement a process to split the audio into smaller chunks before sending to the Whisper API. For files larger than 30MB, a warning will be displayed if not on Wi-Fi. The maximum file size for audio uploads is 100MB and the maximum audio duration is 90 minutes. A warning will be displayed to the user if they are attempting to upload a file larger than 30MB over a non-Wi-Fi network.  All functions must be deployed to the `asia-northeast1` region. Implement a mechanism to handle large files gracefully, providing warnings to the users when necessary.  Implement robust error handling and logging for all API calls. Implement retry mechanisms for failed API calls with exponential backoff. Lesson data includes `instrument`, `summary`, `tags`, `summaryRequired`, `summaryInProgress`, `transcriptionCompleteTime`, `transcriptionId`, `processingId`, and `lockAcquiredAt` fields. `instrument` is populated from user profile. The `generateSummaryFromTranscriptionV2` function will only generate a summary if the `summaryRequired` field is `true` and the lesson's status is `transcribed`.  A new `transcriptionId` field has been added to the Lesson data structure to prevent duplicate processing. A new `transcriptionCompleteTime` field has been added to the Lesson data structure.  A new `lockAcquiredAt` field has been added to the Lesson data structure.  Dify input field settings for transcription (callDifyAPI function) are no longer needed since Dify has been removed. Dify input field settings for summary and tag generation (createLessonSummary function) are no longer needed since Dify has been removed. To check OpenAI API errors, follow these steps: 1. Set the OPENAI_API_KEY environment variable in your Firebase Functions environment. 2. Redeploy your functions to apply the new settings. 3. Check the Firebase Functions logs to monitor function executions and identify errors.  For detailed API request/response logs, check the browser's DevTools console.  The Whisper API has a file upload limit; files exceeding this limit will result in a "413 Request Entity Too Large" error. User only receives summary and tags; transcription is not provided. A mechanism to handle large files gracefully, providing warnings to users when necessary, has been implemented. Robust error handling and logging for all API calls have been implemented. Retry mechanisms for failed API calls with exponential backoff have been implemented. The maximum file size for audio uploads is 100MB, and the maximum audio duration is 90 minutes. A warning will be displayed to the user if they are attempting to upload a file larger than 30MB over a non-Wi-Fi network. All functions must be deployed to the `asia-northeast1` region.  A new `transcriptionId` field has been added to the Lesson data structure to prevent duplicate processing.  A new `processAudioCustomFlow` function has been implemented to handle the custom flow: Whisper (with splitting) -> OpenAI (model unspecified) -> Gemini 1.5 Flash.  A new `processAudioV2` function has been implemented to dynamically select the appropriate processing flow based on user settings.  The `processAudioV2` function now calls `processAudioCustomFlow` or `processAudioDynamic` depending on the user's selected flow type.  A new `generateSummaryWithKnowledgeBase` function has been implemented to generate summaries using a knowledge base.  The knowledge base is now populated by an admin user via the `uploadKnowledge` function.  The `uploadKnowledge` function now includes an admin key for authentication. A new `adminListKnowledge`, `adminGetKnowledge`, `adminDeleteKnowledge`, and `getInstrumentTemplates` functions have been implemented for admin users to manage knowledge base entries.  The `getSummaryPromptByInstrument` function in `dify.ts` has been updated to use if statements instead of a switch statement to improve the accuracy of instrument matching.  The `getSummaryPromptForGemini` and `getTagsPromptForGemini` functions in `genkit.ts` have also been updated to use if statements for improved instrument matching. The `dify.ts` file and related functions have been removed from the project. The system now uses only the `genkit.ts` module for summary and tag generation. The `generateSummaryFromTranscriptionV2` function now uses `generateSummaryWithKnowledgeBase` for summary and tag generation. A new `generateSummaryWithKnowledge` function has been implemented to generate summaries using a knowledge base. The `generateSummaryWithKnowledgeBase` function now uses a knowledge base to generate summaries and tags.  A new `processAudioFileV2` function has been implemented to handle the audio file processing. A new `generateSummaryFromTranscriptionV2` function has been implemented to handle summary and tag generation.  The `processAudioV2` function now uses the `processAudioCustomFlow` function for the custom flow. The `processAudioCustomFlow` function now uses a knowledge base for summary generation. A new `adminListKnowledge`, `adminGetKnowledge`, `adminDeleteKnowledge`, and `getInstrumentTemplates` functions have been implemented for admin users to manage knowledge base entries.  The `getSummaryPromptByInstrument` function now uses if statements for improved instrument matching. The `getSummaryPromptForGemini` and `getTagsPromptForGemini` functions now use if statements for improved instrument matching. The `generateSummaryFromTranscriptionV2` function now uses `generateSummaryWithKnowledgeBase` if the knowledge base is enabled. Tags are now generated as three individual words.  The current workflow is: Audio Upload -> `processAudioFileV2` (Whisper transcription with splitting) -> `generateSummaryFromTranscriptionV2` (Summary and Tag generation using Gemini). The `generateSummaryFromTranscriptionV2` function now uses `generateSummaryWithKnowledgeBase` for summary generation.  Long audio files are split into 10-minute chunks with overlap for transcription to improve context and accuracy.  The summarization API has been changed to OpenAI's o3-mini model.  Long audio files are split into approximately 10-minute chunks with overlap for improved context and accuracy during transcription. The summarization API is now OpenAI's o3-mini model.  The audio is now split into approximately 10-minute chunks with a 20-second overlap to maintain context during transcription using Whisper. The summarization API is now OpenAI's o3-mini model.  A new admin section has been added to handle knowledge base management.  Admin functions (`adminListKnowledge`, `adminGetKnowledge`, `adminDeleteKnowledge`, `getInstrumentTemplates`) have been implemented to manage the knowledge base. The `generateSummaryFromTranscriptionV2` function now uses the `generateSummaryWithKnowledgeBase` function for summary generation. Long audio files are split into approximately 10-minute chunks with a 20-second overlap to maintain context during transcription using Whisper. The summarization API is now OpenAI's o3-mini model.  Tags are now generated as three individual words.  Long audio files are now split into approximately 10-minute chunks with a 20-second overlap for transcription.  Whisper API is used for transcription. OpenAI's o3-mini model is used for summarization. Tags are generated as three individual words. If fewer than three words are generated, the instrument name will be used to fill any gaps.  The custom flow now uses OpenAI's o3-mini model for summarization.  The audio is now split into approximately 10-minute chunks with a 20-second overlap to maintain context during transcription.  The summarization API is now OpenAI's o3-mini model. Tags are generated as three individual words.  Long audio files are split into 10-minute chunks with overlap for transcription. The summarization API has been changed to OpenAI's o3-mini model. Long audio files are now split into approximately 10-minute chunks with a 20-second overlap for transcription using the Whisper API.  The summarization is now performed using the OpenAI o3-mini model. Tags are generated as three individual words. If fewer than three words are generated, the instrument name is used to fill any gaps. For audio files larger than 30MB, a warning will be displayed if not on Wi-Fi.  A warning will be displayed to the user if they are attempting to upload a file larger than 30MB over a non-Wi-Fi network. Long audio files are split into approximately 10-minute chunks with a 20-second overlap for improved context and accuracy during transcription using Whisper. The summarization API is now OpenAI's o3-mini model. Tags are generated as three individual words. The transcription is performed using the OpenAI Whisper API. The summarization is performed using the OpenAI o3-mini model. Tags are generated as three individual words. If fewer than three words are generated, the instrument name is used to fill any gaps.  For audio files larger than 30MB, a warning will be displayed if not on Wi-Fi.  A warning will be displayed to the user if they are attempting to upload a file larger than 30MB over a non-Wi-Fi network. Long audio files are split into approximately 10-minute chunks with a 20-second overlap for transcription.  The summarization API is now OpenAI's o3-mini model. Tags are generated as three individual words.  Lesson pieces are now optional.  A new "AI Instructions" field has been added to the lesson form, allowing users to provide instructions for AI summarization.  This field is limited to 100 characters.  The AI instructions are sent to the Dify API as part of the query parameter.  The `processAudioV3FuncV2` function has been updated to handle the new AI instructions parameter. The `processAudioV3FuncV2` function now has a max instance count of 50.  The `processAudioV3FuncV2` function is now the only active function, and `processAudioFuncV2` has been removed.  If a "deadline-exceeded" error occurs, the function will return a success status and a message to the user indicating that processing is underway. The user will be redirected to the home screen.  Lesson pieces are optional.  A new "AI Instructions" field (max 100 characters) has been added to the lesson form.  Lesson pieces are optional.  A new "AI Instructions" field (max 100 characters) has been added to the lesson form.  The `processAudioV3FuncV2` function now handles lesson pieces and AI instructions.  The `processAudioV3FuncV2` function now has a max instance count of 50. If a "deadline-exceeded" error occurs, the function will return a success status and a message to the user indicating that processing is underway. The user will be redirected to the home screen.  Lesson pieces are optional.  A new "AI Instructions" field (max 100 characters) has been added to the lesson form.  The `processAudioV3FuncV2` function now handles lesson pieces and AI instructions. The `processAudioV3FuncV2` function now has a max instance count of 50.  The function now includes lesson pieces and AI instructions. The `processAudioV3FuncV2` function now has a max instance count of 50. If a "deadline-exceeded" error occurs, the function will return a success status and a message to the user indicating that processing is underway.  The user will be redirected to the home screen.  The `processAudioV3FuncV2` function now handles lesson pieces and AI instructions. The function now includes lesson pieces and AI instructions. The `processAudioV3FuncV2` function now has a max instance count of 50. If a "deadline-exceeded" error occurs, the function will return a success status and a message to the user indicating that processing is underway. The user will be redirected to the home screen.  The function now handles lesson pieces and AI instructions. The `processAudioV3FuncV2` function now has a max instance count of 50. If a "deadline-exceeded" error occurs, the function will return a success status and a message to the user indicating that processing is underway. The user will be redirected to the home screen. A new `config.ts` file has been added for centralized environment variable management to avoid circular dependencies.  Lesson pieces are optional. A new "AI Instructions" field (max 100 characters) has been added to the lesson form.  The `processAudioV3FuncV2` function now handles lesson pieces and AI instructions. The `processAudioV3FuncV2` function now has a max instance count of 50. If a "deadline-exceeded" error occurs, the function will return a success status and a message to the user indicating that processing is underway.  The user will be redirected to the home screen.  The `processAudioV3FuncV2` function is now the only active function.  Lesson pieces are optional. A new "AI Instructions" field (max 100 characters) has been added to the lesson form. The `pieces` parameter must be a string (JSON.stringify).  User-based collections for tasks and lessons in Firestore are now enforced. The `pieces` parameter must be a JSON string.  Lesson pieces are optional. A new "AI Instructions" field (max 100 characters) has been added to the lesson form.  The `pieces` parameter must be a JSON string.  The user can now provide "AI Instructions" (max 100 characters) to guide the AI summarization process.  The `pieces` parameter should be a JSON string.
Lesson pieces are optional. A new "AI Instructions" field (max 100 characters) has been added to the lesson form to allow users to provide specific instructions for AI summarization. The `pieces` parameter must be a JSON string.  The `pieces` parameter must be a JSON string.  User-based collections for tasks and lessons in Firestore are now enforced.  Lesson pieces are optional. A new "AI Instructions" field (max 100 characters) has been added to the lesson form to allow users to provide specific instructions for AI summarization. The `pieces` parameter must be a JSON string. The `pieces` parameter must be a JSON string. User-based collections for tasks and lessons in Firestore are now enforced.  A new "pieces" parameter (JSON string) and "AI Instructions" parameter (max 100 characters) have been added to the lesson form.  User-based collections for tasks and lessons in Firestore are now enforced.
- Lesson pieces are optional.
- A new "AI Instructions" field (max 100 characters) has been added to the lesson form.
- The `pieces` parameter in API requests must be a JSON string.
- User-based collections for tasks and lessons in Firestore are now enforced.
- The "Schedule" tab will be renamed to "Progress" and will include a calendar view (current schedule) and a graph view (monthly task completion, practice days, and lesson count). The "Schedule" tab has been renamed to "Progress" and will include a calendar view and a graph view.  The Progress tab will display a calendar view and a graph view showing monthly task completion, practice days, and lesson count.  The Progress tab will display a calendar view and a graph view showing monthly task completion, practice days, and lesson count. Interactive elements such as tap for details and swipe for period navigation will be implemented.
- Lesson pieces are optional.
- A new "AI Instructions" field (max 100 characters) has been added to the lesson form.
- The `pieces` parameter in API requests must be a JSON string.
- User-based collections for tasks and lessons in Firestore are now enforced.
- The "Schedule" tab has been renamed to "Progress" and includes a calendar and graph view showing monthly task completion, practice days, and lesson count. Interactive elements such as tap for details and swipe for period navigation have been implemented.  The `pieces` parameter should be a JSON string.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now includes a calendar and graph view.  The graph view will show monthly task completion, practice days, and lesson count. Interactive elements such as tap for details and swipe for period navigation will be implemented.  The `pieces` parameter should be a JSON string.
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count. Interactive elements such as tap for details and swipe for period navigation have been implemented.  The `pieces` parameter should be a JSON string.
- The `pieces` parameter should be a JSON string.
- User-based collections are enforced for tasks and lessons in Firestore.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now displays a monthly graph showing task completion, practice days, and lesson count.  Interactive elements such as tap for details and swipe for period navigation have been implemented. The `pieces` parameter must be a JSON string.
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements. The `pieces` parameter must be a JSON string.
- Lesson pieces are optional.
- A new "AI Instructions" field (max 100 characters) has been added to the lesson form.
- The `pieces` parameter in API requests must be a JSON string.
- User-based collections for tasks and lessons in Firestore are now enforced.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements.  The `pieces` parameter must be a JSON string.
- User-based collections are enforced for tasks and lessons in Firestore.  The `pieces` parameter must be a JSON string.  The "Schedule" tab has been renamed to "Progress".  The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation. The `pieces` parameter must be a JSON string.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements. The `pieces` parameter must be a JSON string.
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation. The `pieces` parameter must be a JSON string.
- In the AI Lesson tab, the practice section chat rooms should be changed to: Tone, High Notes, Low Notes, Tonguing, Vibrato.  This content will vary by instrument. This is the pattern for saxophone.
- Lesson pieces are optional.
- A new "AI Instructions" field (max 100 characters) has been added to the lesson form.
- The `pieces` parameter in API requests must be a JSON string.
- User-based collections for tasks and lessons in Firestore are now enforced.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation.  The `pieces` parameter must be a JSON string.
- The pieces parameter must be a JSON string.
- User-based collections are enforced for tasks and lessons in Firestore.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now displays a monthly graph showing task completion, practice days, and lesson count.  Interactive elements such as tap for details and swipe for period navigation have been implemented. The `pieces` parameter must be a JSON string.
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements. The `pieces` parameter must be a JSON string.
- Lesson pieces are optional.
- A new "AI Instructions" field (max 100 characters) has been added to the lesson form.
- The `pieces` parameter in API requests must be a JSON string.
- User-based collections for tasks and lessons in Firestore are now enforced.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements.  The `pieces` parameter must be a JSON string.
- User-based collections are enforced for tasks and lessons in Firestore.  The `pieces` parameter must be a JSON string.  The "Schedule" tab has been renamed to "Progress".  The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation. The `pieces` parameter must be a JSON string.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements. The `pieces` parameter must be a JSON string.
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation. The `pieces` parameter must be a JSON string.
- In the AI Lesson tab, the practice section chat rooms should be changed to: Tone, High Notes, Low Notes, Tonguing, Vibrato.  This content will vary by instrument. This is the pattern for saxophone.
- The `pieces` parameter must be a JSON string.
- User-based collections are enforced for tasks and lessons in Firestore.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation. The `pieces` parameter must be a JSON string.
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements. The `pieces` parameter must be a JSON string.
- The "pieces" parameter must be a JSON string.
- User-based collections are enforced for tasks and lessons in Firestore.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation.  The `pieces` parameter must be a JSON string.
- The home screen should be scrollable. The "Task Completion" section in the home screen should be replaced with "Monthly Task Completion Count". Instead of a simple count, display a scrollable badge section showing "Monthly Task Completion Count: X".
- In the AI Lesson tab, the practice section chat rooms should be changed to: Tone, High Notes, Low Notes, Tonguing, Vibrato (this will vary by instrument; this is the pattern for saxophone). The home screen should be scrollable. The "Task Completion" section in the home screen should be replaced with "Monthly Task Completion Count". Instead of a simple count, display a scrollable badge section showing "Monthly Task Completion Count: X".
- The "Schedule" tab has been renamed to "Progress". The home screen should be scrollable.  The "Task Completion" section should be replaced with a scrollable badge section showing "Monthly Task Completion Count: X". In the AI Lesson tab, the practice section chat rooms should be changed to: Tone, High Notes, Low Notes, Tonguing, Vibrato.  This content will vary by instrument. This is the pattern for saxophone.  The home screen should be scrollable. The "Task Completion" section in the home screen should be replaced with "Monthly Task Completion Count". Instead of a simple count, display a scrollable badge section showing "Monthly Task Completion Count: X".


The "Schedule" tab has been renamed to "Progress".  The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation. The `pieces` parameter must be a JSON string.  In the AI Lesson tab, the practice section chat rooms should be changed to: Tone, High Notes, Low Notes, Tonguing, Vibrato.  This content will vary by instrument. This is the pattern for saxophone.  The home screen should be scrollable. The "Task Completion" section in the home screen should be replaced with "Monthly Task Completion Count". Instead of a simple count, display a scrollable badge section showing "Monthly Task Completion Count: X".  The `pieces` parameter must be a JSON string.  User-based collections are enforced for tasks and lessons in Firestore. The "Schedule" tab has been renamed to "Progress".  The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation.  The `pieces` parameter must be a JSON string.  The home screen should be scrollable. The "Task Completion" section in the home screen should be replaced with "Monthly Task Completion Count". Instead of a simple count, display a scrollable badge section showing "Monthly Task Completion Count: X".  The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation. The `pieces` parameter must be a JSON string.  In the AI Lesson tab, the practice section chat rooms should be changed to: Tone, High Notes, Low Notes, Tonguing, Vibrato.  This content will vary by instrument. This is the pattern for saxophone. The home screen should be scrollable. The "Task Completion" section in the home screen should be replaced with "Monthly Task Completion Count". Instead of a simple count, display a scrollable badge section showing "Monthly Task Completion Count: X".

- Lesson pieces are optional.
- A new "AI Instructions" field (max 100 characters) has been added to the lesson form.
- The `pieces` parameter in API requests must be a JSON string.
- User-based collections for tasks and lessons in Firestore are now enforced.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation.
- The home screen should be scrollable.
- The "Task Completion" section should be replaced with a scrollable badge section showing "Monthly Task Completion Count: X".
- In the AI Lesson tab, the practice section chat rooms should be changed to: Tone, High Notes, Low Notes, Tonguing, Vibrato. This content will vary by instrument. This is the pattern for saxophone.


## CODE STYLE

[Add any new code style guidelines here]

## FOLDER ORGANIZATION

[Add any new folder organization guidelines here]  A new folder `app/features/analysis/components` has been added.

## TECH STACK

- React Native
- Firebase
- OpenAI Whisper API
- OpenAI o3-mini model
- Google Gemini API
- Node.js (Recommendation to upgrade to Node.js 20)
- fluent-ffmpeg
- uuid
- react-native-chart-kit
- victory-native (Consider using)


## PROJECT-SPECIFIC STANDARDS

- Maximum audio file size: 100MB
- Maximum audio duration: 90 minutes
- Warning for uploads > 30MB on non-Wi-Fi networks
- Lesson pieces are optional.
- AI instructions field (max 100 characters) added to lesson form.
- All functions deployed to `asia-northeast1` region.
- `processAudioV3FuncV2` function max instance count: 50
- Lesson pieces are optional.
- AI instructions are included in OpenAI API requests (max 100 characters).
- Use user-based collections for tasks and lessons in Firestore.
- The `pieces` parameter in API requests must be a JSON string.
- Monthly graph added to Progress tab displaying task completion count, practice days, and lesson count. Interactive elements such as tap for details and swipe for period navigation implemented.  The `pieces` parameter should be a JSON string.
- User-based collections are enforced for tasks and lessons in Firestore.
- The "Schedule" tab has been renamed to "Progress".
- The Progress tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements. The `pieces` parameter must be a JSON string.
- The pieces parameter must be a JSON string.
- User-based collections are enforced for tasks and lessons in Firestore.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation. The `pieces` parameter must be a JSON string.
-  The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation. The `pieces` parameter must be a JSON string.
- In the AI Lesson tab, the practice section chat rooms should be changed to: Tone, High Notes, Low Notes, Tonguing, Vibrato.  This content will vary by instrument. This is the pattern for saxophone.
- The `pieces` parameter must be a JSON string.
- User-based collections are enforced for tasks and lessons in Firestore.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation. The `pieces` parameter must be a JSON string.
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements. The `pieces` parameter must be a JSON string.
- The "pieces" parameter must be a JSON string.
- User-based collections are enforced for tasks and lessons in Firestore.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements such as tap for details and swipe for period navigation.  The `pieces` parameter must be a JSON string.
- The home screen should be scrollable. The "Task Completion" section in the home screen should be replaced with "Monthly Task Completion Count". Instead of a simple count, display a scrollable badge section showing "Monthly Task Completion Count: X".
- In the AI Lesson tab, the practice section chat rooms should be changed to: Tone, High Notes, Low Notes, Tonguing, Vibrato (this content will vary by instrument; this is the pattern for saxophone).
- The "Schedule" tab has been renamed to "Progress".
- The home screen should be scrollable.
- The "Task Completion" section should be replaced with a scrollable badge section showing "Monthly Task Completion Count: X".
- In the AI Lesson tab, the practice section chat rooms should be changed to: Tone, High Notes, Low Notes, Tonguing, Vibrato. This content will vary by instrument. This is the pattern for saxophone.
- The home screen should be scrollable.
- The "Task Completion" section in the home screen should be replaced with "Monthly Task Completion Count". Instead of a simple count, display a scrollable badge section showing "Monthly Task Completion Count: X".
- The "Progress" tab should display a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements.
- The `pieces` parameter must be a JSON string.
- User-based collections are enforced for tasks and lessons in Firestore.
- The "Schedule" tab has been renamed to "Progress".
- The home screen is now scrollable.
- The "Task Completion" section has been replaced with a scrollable badge section showing "Monthly Task Completion Count: X".
- In the AI Lesson tab, the practice section chat rooms should be changed to: Tone, High Notes, Low Notes, Tonguing, Vibrato. This content will vary by instrument. This is the pattern for saxophone.
- The "AI Lesson" tab practice section chat rooms are now: Tone, High Notes, Low Notes, Tonguing, Vibrato (this varies by instrument; this is the saxophone pattern).  The home screen is now scrollable. The "Task Completion" section has been replaced with a scrollable badge section showing "Monthly Task Completion Count: X".
- The "AI Lesson" tab practice section chat rooms are now: 音色, 高音, 低音, タンギング, ヴィブラート (This varies by instrument; this is the saxophone pattern). The home screen is now scrollable. The "Task Completion" section has been replaced with a scrollable badge section showing "Monthly Task Completion Count: X".
- The home screen is now scrollable.  The "Task Completion" section has been replaced with a scrollable badge section showing "Monthly Task Completion Count: X".  In the AI Lesson tab, the practice section chat rooms are now: 音色, 高音, 低音, タンギング, ヴィブラート (This varies by instrument; this is the saxophone pattern).


## WORKFLOW & RELEASE RULES

- Deploy all functions to the `asia-northeast1` region.
- Handle "deadline-exceeded" errors by returning a success status and a message to the user. Redirect the user to the home screen.
- Use `config.ts` for centralized environment variable management.
- The `processAudioV3FuncV2` function is now the only active function.
- User-based collections are enforced for tasks and lessons in Firestore.
- The "Schedule" tab has been renamed to "Progress".
- The "Progress" tab now includes a calendar view and a graph view showing monthly task completion, practice days, and lesson count.
- The `pieces` parameter should be a JSON string.
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements. The `pieces` parameter must be a JSON string.
- The "Progress" tab now displays a calendar view and a graph view showing monthly task completion, practice days, and lesson count with interactive elements. The `pieces` parameter must be a JSON string.
- The `pieces` parameter must be a JSON string.
- User-based collections are enforced for tasks and lessons in Firestore.
- The "Schedule" tab has been renamed to "Progress".
- The home screen should be scrollable.
- The "Task Completion" section should be replaced with a scrollable badge section showing "Monthly Task Completion Count: X".
- In the AI Lesson tab, the practice section chat rooms should be changed to: Tone, High Notes, Low Notes, Tonguing, Vibrato. This content will vary by instrument. This is the pattern for saxophone.
- The "Schedule" tab has been renamed to "Progress". The home screen is now scrollable. The "Task Completion" section has been replaced with a scrollable badge section showing "Monthly Task Completion Count: X". In the AI Lesson tab, the practice section chat rooms are now: 音色, 高音, 低音, タンギング, ヴィブラート (This varies by instrument; this is the saxophone pattern).


## REFERENCE EXAMPLES

[Add any new reference examples here]

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

[Add any new documentation guidelines here]

## DEBUGGING

- Check Firebase Functions logs for API errors.
- Check browser's DevTools console for detailed API logs.
- To handle deadline-exceeded errors, return success status and message, redirecting user to home screen.
- Check for issues related to the `pieces` parameter format in Dify API requests. Ensure it's a JSON string.
- The `pieces` parameter must be a JSON string.
- Ensure the `pieces` parameter is a JSON string.
- Ensure the `pieces` parameter is a JSON string.
- Ensure the `pieces` parameter is a JSON string.


## FINAL DOs AND DON'Ts

- DO use OpenAI's o3-mini model for summarization.
- DO split long audio files into 10-minute chunks with a 20-second overlap for transcription.
- DO generate tags as three individual words; use