rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ユーザーが認証済みであることを確認
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 特定のUIDのみが管理者権限を持つように変更
    function isAdmin() {
      return request.auth != null && request.auth.uid == "fY5GIog5htgqyhRBCZDp0CK2SMh1";
    }
    
    // テストユーザーであるかを確認する関数
    function isTestUser() {
      return request.auth.token.email == "test@example.com";
    }
    
    // アプリケーション設定へのアクセス権限
    match /appConfig/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // エラー報告のアクセスルール
    match /errorReports/{reportId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.userId == 'anonymous'
      );
      // 認証済みユーザーまたは匿名ユーザーの作成を許可
      allow create: if true;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // レッスンへのアクセスルール
    match /lessons/{lessonId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || resource.data.shared == true);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // タスクへのアクセスルール
    match /tasks/{taskId} {
      allow read, write: if isAuthenticated() && (
        resource == null || 
        resource.data.userId == request.auth.uid
      );
    }
    
    // ユーザープロファイルへのアクセスルール
    match /userProfiles/{userId} {
      allow read: if isAuthenticated() && userId == request.auth.uid;
      allow write: if isAuthenticated() && userId == request.auth.uid;
    }
    
    // チャットルームへのアクセスルール（従来の構造）
    match /chatRooms/{chatRoomId} {
      allow read: if isAuthenticated() && (
        resource == null || 
        resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // ユーザーのサブコレクションとしてのチャットルーム（新しい構造）
    match /users/{userId}/chatRooms/{chatRoomId} {
      allow read, write: if isAuthenticated() && userId == request.auth.uid;
      
      // メッセージサブコレクション
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && userId == request.auth.uid;
      }
    }
    
    // ユーザーのレッスンサブコレクション
    match /users/{userId}/lessons/{lessonId} {
      allow read, write: if isAuthenticated() && userId == request.auth.uid;
    }
    
    // ユーザーのプロファイルサブコレクション
    match /users/{userId}/profile/{profileId} {
      allow read, write: if isAuthenticated() && userId == request.auth.uid;
    }
    
    // サブスクリプション関連のセキュリティルール
    match /users/{userId}/subscriptions/{productId} {
      allow read: if isAuthenticated() && userId == request.auth.uid;
      allow create, update: if isAuthenticated() && userId == request.auth.uid;
      allow delete: if isAuthenticated() && userId == request.auth.uid;
    }
    
    // ユーザードキュメント自体へのアクセス
    match /users/{userId} {
      allow read, write: if isAuthenticated() && userId == request.auth.uid;
      
      // すべてのサブコレクションにアクセス権限を与える
      match /{collection}/{docId} {
        allow read, write: if isAuthenticated() && userId == request.auth.uid;
        
        // サブコレクションのドキュメント内のサブコレクションへのアクセス
        match /{subcollection}/{subdocId} {
          allow read, write: if isAuthenticated() && userId == request.auth.uid;
        }
      }
    }
    
    // テストユーザー用の特別なアクセス権限
    match /users/{userId}/{document=**} {
      allow read, write: if isAuthenticated() && (isTestUser() || userId == request.auth.uid);
    }
    
    // 処理済みファイルへのアクセスルール
    match /processed_files/{fileId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // ユーザー固有の練習メニュー記録
    match /users/{userId}/practiceRecords/{recordId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // 練習メニュー階層構造（楽器別 > カテゴリ別 > メニュー）
    match /practiceMenus/{instrument} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();

      match /categories/{category} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();

        match /menus/{menuId} {
          allow read: if isAuthenticated();
          allow write: if isAdmin();

          match /sheetMusic/{sheetId} {
            allow read: if isAuthenticated();
            allow write: if isAdmin();
          }
        }
      }
    }

    // アカウント削除予約コレクション
    match /accountDeletions/{userId} {
      // 自分のユーザーIDの削除予約のみ読み書き可能
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // 管理者は全ての削除予約を閲覧可能（簡素化）
      allow read: if isAdmin(); // 既存の関数を使用
      
      // 以下は元のルール（問題があったため削除）
      // allow read: if request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
      //             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
} 